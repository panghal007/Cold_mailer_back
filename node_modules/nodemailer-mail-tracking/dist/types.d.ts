import { Transporter } from 'nodemailer';
interface Address {
    name: string;
    address: string;
}
interface Envelope {
    /** the first address gets used as MAIL FROM address in SMTP */
    from?: string;
    /** addresses from this value get added to RCPT TO list */
    to?: string;
    /** addresses from this value get added to RCPT TO list */
    cc?: string;
    /** addresses from this value get added to RCPT TO list */
    bcc?: string;
}
export declare type SendMailOptions = Parameters<Transporter['sendMail']>['0'];
export declare type IRecipient = SendMailOptions['to'] | SendMailOptions['cc'] | SendMailOptions['bcc'];
export declare type SendMailOptionsWithHtml = SendMailOptions & {
    html: string;
};
export declare type SendMailOptionsPatched = Omit<SendMailOptionsWithHtml, 'envelope'> & {
    envelope: Omit<Envelope, 'to'> & {
        to: string | Address;
    };
};
interface MailTrackOptionsBase {
    baseUrl: string;
    jwtSecret: string;
    imageAlt?: string;
}
export interface MailTrackOptionsSendMail extends MailTrackOptionsBase {
    sendConcurrency?: number;
    getData: (data: JwtData | JwtDataForLink) => {
        [key: string]: any;
    };
    getSendOptionsBeforeSend?: (options: SendMailOptionsPatched) => SendMailOptionsPatched;
}
export interface MailTrackOptionsMiddleware extends MailTrackOptionsBase {
    onLinkClick: (data: JwtDataForLink) => Promise<void>;
    onBlankImageView: (data: JwtData) => Promise<void>;
}
export declare type MailTrackOptions = MailTrackOptionsSendMail & MailTrackOptionsMiddleware;
export interface JwtData {
    recipient: string;
    [key: string]: any;
}
export declare type JwtDataForLink = JwtData & {
    link: string;
};
export {};
